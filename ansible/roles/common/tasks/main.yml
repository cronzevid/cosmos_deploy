---
- name: Check for valid tags
  debug:
    msg: "Running play with {{ ansible_run_tags }}, provide either 'custom-chain' or 'cosmos-chain'"
  failed_when: "'custom-chain' not in ansible_run_tags and 'cosmos-chain' not in ansible_run_tags "

- name: Change hostname to inventory name
  hostname:
    name: "{{ inventory_hostname }}"

- name: Check GO version
  shell: bash -ilc 'go version'
  register: go_current_version
  ignore_errors: true

- name: Update repo listings
  apt:
    update_cache: true
  when: ansible_distribution == "Ubuntu"

- name: Remove old netcat
  apt:
    name: netcat-openbsd
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Install specified GO version
  block:
    - name: Download go
      get_url:
        url: "https://dl.google.com/go/go{{ go_version }}.linux-amd64.tar.gz "
        dest: /opt
        mode: 0755
    - name: Extract go
      unarchive:
        src: "/opt/go{{ go_version }}.linux-amd64.tar.gz"
        dest: /opt
        remote_src: true
      when: not ansible_check_mode
    - name: Install go
      command: mv /opt/go /usr/local
    - name: Create go vars in profile
      lineinfile:
        dest: /root/.profile
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^export\ GOROOT', line: 'export GOROOT=/usr/local/go' }
        - { regexp: '^export\ PATH=.*', line: 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' }
        - { regexp: '^export\ GOPATH=.*', line: 'export GOPATH=/root/go/' }
  when: (go_current_version is not defined and go_version is defined) or (go_current_version is defined and go_current_version.stdout_lines[0].split(' ')[2][2:] != go_version)

- name: Install packages_custom
  package:
    state: present
    update_cache: false
    name: "{{ packages_custom | default([]) }}"
  when:
    - packages_custom is defined
